package project.pingpong.myapp;

import java.text.DateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;

/**
 * Handles requests for the application's pages (not just home)
 */
@Controller
public class HomeController {
	
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	private PingPongClient client = new PingPongClient();
	
	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(Locale locale, Model model) {
		logger.info("Welcome home! The client locale is {}.", locale);
		
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		
		String formattedDate = dateFormat.format(date);
		
		model.addAttribute("serverTime", formattedDate );
		
		return "home";
	}
	
	@RequestMapping(value= "/record_match", params = {"player1", "player2", "score1", "score2"})
	public String record_match(@RequestParam("player1") String player1, @RequestParam("player2") String player2, @RequestParam("score1") String score1, @RequestParam("score2") String score2, Model model)
	{
		InitializeClient();
		//String returnStr = "fail";
		int sc1 = 0;
		int sc2 = 0;
		boolean intCast = true;
		
		//Split params into first and last names for player lookup
		String[] firstLast = player1.split("_");
		String player1First = firstLast[0];
		String player1Last = firstLast[1];
		firstLast = player2.split("_");
		String player2First = firstLast[0];
		String player2Last = firstLast[1];
		
		ResultSet rs1 = client.querySchema(player1First, player1Last);
		ResultSet rs2 = client.querySchema(player2First, player2Last);
		
		try
		{
			sc1 = Integer.parseInt(score1);
			sc2 = Integer.parseInt(score2);
		}
		catch(Exception e)
		{	
			model.addAttribute("error", "Score could not be parsed");
			return "error";
		}
		
		if(!player1.equals(null) && !player2.equals(null) && intCast)
		{				
			if(!resultSetEmpty(rs1) && !resultSetEmpty(rs2))
			{				
				if(sc1 < sc2)
				{				
					//Enter loss for player 1, sc1 is for, sc2 is against
					client.updatePlayerRecord(player1First, player1Last, sc1, sc2, false);
					//Enter win for player 2, sc2 is for, sc1 is against
					client.updatePlayerRecord(player2First, player2Last, sc2, sc1, true);
				}
				else if(sc1 > sc2)
				{
					//Enter win for player 1, sc1 is for, sc2 is against
					client.updatePlayerRecord(player1First, player1Last, sc1, sc2, true);
					//Enter loss for player 2, sc2 is for, sc1 is against
					client.updatePlayerRecord(player2First, player2Last, sc2, sc1, false);
				}
			}
		}
		client.recordMatch(player1First, player1Last, player2First, player2Last, sc1, sc2);
		PingPongMatch ppm = new PingPongMatch();
		match[0] = client.getPlayer(player1First, player1Last);
		match[1] = client.getPlayer(player2First, player2Last);
		model.addAttribute("Match", match);
		CloseClient();
		return "record_match";
	}
	
	@RequestMapping("/show_records")
	public String show_records(Model model)				//public PingPongPlayer[] show_records()
	{
		InitializeClient();
		PingPongPlayer[] retVal = client.getPlayers();
		CloseClient();
		model.addAttribute("Players", retVal);
		return "show_records";
	}
	
	@RequestMapping(value="/create_player", params={"firstName", "lastName"})
	public String create_player(Model model, @RequestParam("firstName") String fN, @RequestParam("lastName") String lN)
	{
		InitializeClient();
		if(resultSetEmpty(client.querySchema(fN, lN)))
		{
			 boolean flag = client.createPlayer(fN,lN);
			 if(flag)
			 {
				 PingPongPlayer p = client.getPlayer(fN, lN);
				 model.addAttribute("newPlayer", p);
			 }
			 else
			 {
				 model.addAttribute("error", "Error creating player.");
				 return "error";
			 }
			CloseClient();
			return "create_player";
		}
		else
		{
			model.addAttribute("error", "Player already exists!");
			CloseClient();
			return "error";
		}		 
	}
	
	public boolean resultSetEmpty(ResultSet r)
	{
		List<Row> rows = r.all();
		if(rows.isEmpty())
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	public void InitializeClient()
	{
		client.connect("127.0.0.1");		
	}
	
	public void CloseClient(){
		client.close();		
	}
	
}
