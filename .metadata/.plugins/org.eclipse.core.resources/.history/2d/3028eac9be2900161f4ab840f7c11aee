package project.pingpong.myapp;

import java.util.ArrayList;

import java.util.*;

import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.Host;
import com.datastax.driver.core.Metadata;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;

public class PingPongClient {
	private Cluster cluster;
	private Session session;
	
	public void connect(String node)
	{
		cluster = Cluster.builder().addContactPoint(node).build();
		Metadata metadata = cluster.getMetadata();
		System.out.printf("Conected to cluster: %s\n", metadata.getClusterName());
		for(Host host : metadata.getAllHosts())
		{
			System.out.printf("Datacenter: %s; Host: %s; Rack: %s\n", host.getDatacenter(), host.getAddress(), host.getRack());
		}		
		session = cluster.connect();
	}
	
	public void close()
	{
		session.close();
		cluster.close();
	}
	
	public Session getSession()
	{
		return this.session;
	}
	
	public void updatePlayerRecord(String firstName, String lastName, int pointsF, int pointsA, boolean win) 
	{
		ResultSet results = querySchema(firstName, lastName);
		int wins = 0;
		int losses = 0;
		Double pointsFor = 0.0;
		Double pointsAgainst = 0.0;
		for (Row r : results)
		{
			wins = r.getInt("wins");
			losses = r.getInt("losses");
			pointsFor = r.getDouble("pointsFor");
			pointsAgainst = r.getDouble("pointsAgainst");
		}
		
		pointsFor += pointsF;
		pointsAgainst += pointsA;
		if(win)
		{
			wins++;
			session.execute("UPDATE pingpong.players SET wins = " + wins + " WHERE lastName = '" + lastName + "' AND firstName = '" + firstName +  "';");
		}
		else
		{
			losses++;
			session.execute("UPDATE pingpong.players SET losses = " + losses + " WHERE lastName = '" + lastName + "' AND firstName = '" + firstName +  "';");
		}
		session.execute("UPDATE pingpong.players SET pointsFor = " + pointsFor + " WHERE lastName = '" + lastName + "' AND firstName = '" + firstName +  "';");
		session.execute("UPDATE pingpong.players SET pointsAgainst = " + pointsAgainst + " WHERE lastName = '" + lastName + "' AND firstName = '" + firstName +  "';");
	}
	
	public ResultSet querySchema(String firstName, String lastName)
	{
		ResultSet results = session.execute(
									"SELECT * FROM pingpong.players " +
									"WHERE firstName = '" + firstName + 
									"' AND lastName = '" +lastName+ "';");
		return results;
	}
	
	public ResultSet querySchema()
	{
		ResultSet results = session.execute("SELECT * FROM pingpong.players;");
		return results;
	}
	
	public PingPongPlayer[] getPlayers()
	{
		ArrayList<PingPongPlayer> p = new ArrayList<PingPongPlayer>();		
		ResultSet results = querySchema();
		
		for(Row r : results)
		{
			PingPongPlayer play = new PingPongPlayer();
			play.setFirstName(r.getString("firstName"));
			play.setLastName(r.getString("lastName"));
			play.setWins(r.getInt("wins"));
			play.setLosses(r.getInt("losses"));
			play.setScoreFor(r.getDouble("pointsFor"));							
			play.setScoreAgainst(r.getDouble("pointsAgainst"));
			
			p.add(play);
		}
		PingPongPlayer[] ppp = new PingPongPlayer[p.size()];
		return p.toArray(ppp);
	}
	
	public PingPongPlayer getPlayer(String firstName, String lastName)
	{
		PingPongPlayer play = new PingPongPlayer();
		ResultSet result = querySchema(firstName, lastName);
		for(Row r : result)
		{
			play.setFirstName(r.getString("firstName"));
			play.setLastName(r.getString("lastName"));
			play.setWins(r.getInt("wins"));
			play.setLosses(r.getInt("losses"));
			play.setScoreFor(r.getDouble("pointsFor"));							
			play.setScoreAgainst(r.getDouble("pointsAgainst"));			
			break;
		}
		return play;
	}
	
	public PingPongMatch getMatch(String player1, String player2)
	{
		PingPongMatch match = new PingPongMatch();
		ResultSet rs = session.execute("SELECT * FROM pingpong.matches WHERE " +
							"player1 = '" + player1 + "' AND player2 = '" +
							"';");
		if(rs.isExhausted())
		{
			String[] splitString = player1.split(" ");			
			PingPongPlayer p = getPlayer(splitString[0], splitString[1]);
			String[] splitString2 = player2.split(" ");
			PingPongPlayer p2 = getPlayer(splitString2[0], splitString2[1]);
			if(p.getWins() == -1 || p2.getWins() == -1)
			{
				return null;
			}
			else
			{
				createMatch(player1, player2);
			}
		}
		//add more
		for(Row r : rs)
		{
			match.setPlayer1(r.getString("player1"));
			match.setPlayer2(r.getString("player2"));
			match.setP1Score(r.getDouble("p1Score"));
			match.setP1Wins(r.getInt("p1wins"));
			match.setP2Score(r.getDouble("p2Score"));
			match.setP2Wins(r.getInt("p2wins"));
		}		
		return match;
	}
	
	public boolean createPlayer(String fN, String lN)
	{
		try
		{
			session.execute("INSERT INTO pingpong.players (firstName, lastName, wins, losses, pointsFor, pointsAgainst) VALUES ('" + fN + "', '" + lN + "', 0, 0, 0, 0);");
		}
		catch(Exception e)
		{
			return false;
		}
		return true;				
	}
	
	public boolean recordMatch(String p1First, String p1Last, String p2First, String p2Last, int p1Score, int p2Score)
	{
		String p1 = p1First + " " + p1Last;
		String p2 = p2First + " " + p2Last;
		PingPongMatch ppm = getMatch(p1, p2);
		if(p1Score > p2Score)
		{
			ppm.setP1Wins(ppm.getP1Wins() + 1);
		}
		else if(p1Score < p2Score)
		{
			ppm.setP2Wins(ppm.getP2Wins() + 1);
		}
		ppm.setP1Score(ppm.getP1Score() + p1Score);
		ppm.setP2Score(ppm.getP2Score() + p2Score);
		
		try
		{
			
		}
		catch(Exception e)
		{
			
		}
		
		return true;
	}
	
	public boolean createMatch(String p1, String p2)
	{
		try
		{
			session.execute("INSERT INTO pingpong.matches (player1, player2, p1score, p1wins, p2score, p2wins)" +
							"VALUES ('" + p1 + "', '" + p2 + "', 0, 0, 0, 0);");
		}
		catch(Exception e)
		{
			return false;
		}
		return true;
	}
	
	public void deletePlayer(String firstName, String lastName)
	{		
		session.execute(
				"DELETE FROM pingpong.players WHERE " +
				"firstName = " + firstName + "AND lastName = " + lastName + ";");
	}	
}
